datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  password      String?
  family_name   String?
  role          Role         @default(USER)
  picture         String?
  given_name    String?

  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Store Store[]

  Cart Cart[]

  Review Review[]
  @@map("users")
  Order Order[]
  Wishlist Wishlist[]
}

model Category{
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String?
  Image         Image[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  store         Store@relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId       String @db.ObjectId
  products     Product[]
  parentCategory Category? @relation("ParentToChild",fields: [parentCategoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentCategoryId String? @db.ObjectId
  childCategories Category[] @relation("ParentToChild")
  Sale Sale? @relation(fields: [saleId], references: [id], onDelete: Cascade)
  saleId String? @db.ObjectId
  Discount Discount?@relation(fields: [discountId], references: [id], onDelete: Cascade)
  discountId String? @db.ObjectId
  Collection Collection?@relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId String? @db.ObjectId

  Banner Banner[]
}

enum Role {
  USER
  ADMIN
  VENDOR
}

model Store{
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  description   String?
  user          User@relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Image Image[]
  Category Category[]

  Collection Collection[]

  Discount Discount[]

  Sale Sale[]

  Banner Banner[]

  Brand Brand[]
}



model Product {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  description   String?
  // Remove price and stock from base product
  status        ProductStatus @default(DRAFT)
  categoryId    String @db.ObjectId
  category      Category?@relation(fields: [categoryId], references: [id], onDelete: Cascade)
 
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  Image Image[]
  Cart Cart[]
  Review Review[]
  ProductVariant ProductVariant[]
  Collection Collection?@relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId String? @db.ObjectId
  Discount Discount?@relation(fields: [discountId], references: [id], onDelete: Cascade)
  discountId String? @db.ObjectId
  sale Sale?@relation(fields: [saleId], references: [id], onDelete: Cascade)
  saleId String? @db.ObjectId

  // Add these fields for base product information
  sku           String @unique     // Stock Keeping Unit
  manufacturer  String?
  basePrice     Float?          // Optional reference price
  Brand Brand?@relation(fields: [brandId], references: [id], onDelete: Cascade)
  brandId String? @db.ObjectId

  Order Order[]

  Wishlist Wishlist[]
}

model Brand{
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String?
  Image         Image[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  store         Store@relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId       String @db.ObjectId
  products      Product[]
}

enum ProductStatus {
  PUBLISHED
  DRAFT
  ARCHIVED
  SALE_OF_THE_DAY
  FEATURED
  ON_SALE
  OUT_OF_STOCK
  DISCOUNTED
  NEW
  TRENDING
  BEST_SELLER
  RECOMMENDED
  TOP_RATED
  POPULAR
  EXCLUSIVE
  LIMITED
  SOLD_OUT
  UPCOMING
  TOP_DEAL
  HOT_DEAL
  DEAL_OF_THE_DAY
  SPECIAL_OFFER
}



model Collection{
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  description   String?
  status        CollectionStatus @default(ACTIVE)
  startDate     DateTime
  endDate       DateTime
  Image         Image[]
  products      Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  store         Store@relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId       String @db.ObjectId
  ProductVariant ProductVariant[]

  Category Category[]

  Banner Banner[]
}
enum CollectionStatus {
  ACTIVE
  INACTIVE
  SCHEDULED
  EXPIRED
}

model Discount {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String?
  value         Float
  type          DiscountType    @default(PERCENTAGE)
  code          String?         // Optional, for coupon-based discounts
  minPurchase   Float?          // Minimum purchase amount to apply the discount
  maxUses       Int?            // Maximum number of times the discount can be used
  usedCount     Int             @default(0)
  startDate     DateTime
  endDate       DateTime
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  store         Store           @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId       String          @db.ObjectId
  status        DiscountStatus  @default(ACTIVE)
  products      Product[]       // Products this discount applies to
  categories    Category[]      // Categories this discount applies to

  ProductVariant ProductVariant[]

  Banner Banner[]
}

model Sale {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String?
  discountValue Float
  discountType  DiscountType    @default(PERCENTAGE)
  startDate     DateTime
  endDate       DateTime
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  store         Store           @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId       String          @db.ObjectId
  status        SaleStatus      @default(ACTIVE)
  products      Product[]       // Products included in the sale
  categories    Category[]      // Categories included in the sale

  ProductVariant ProductVariant[]

  Banner Banner[]
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

enum DiscountStatus {
  ACTIVE
  INACTIVE
  SCHEDULED
  EXPIRED
}

enum SaleStatus {
  ACTIVE
  INACTIVE
  SCHEDULED
  EXPIRED
}

model Review{
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  rating        Int?
  comment       String?
  product       Product@relation(fields: [productId], references: [id])
  productId     String @db.ObjectId
  user          User@relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductVariant {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  description   String?
  name          String?
  price         Float?
  stock         Int?
  sku           String   @unique
  Image         Image[]
  status        ProductStatus @default(DRAFT)
  product       Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId     String    @db.ObjectId
  collection    Collection? @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId String?    @db.ObjectId
  discount      Discount? @relation(fields: [discountId], references: [id], onDelete: Cascade)
  discountId    String?    @db.ObjectId
  sale          Sale?     @relation(fields: [saleId], references: [id], onDelete: Cascade)
  saleId        String?    @db.ObjectId
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  VariantAttribute VariantAttribute[]
}

model VariantAttribute {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  value         String
  productVariant ProductVariant@relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  productVariantId String @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart{
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  user          User@relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String @db.ObjectId
  product       Product@relation(fields: [productId], references: [id], onDelete: Cascade)
  productId     String @db.ObjectId
  quantity      Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order{
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  user          User@relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String @db.ObjectId
  product       Product@relation(fields: [productId], references: [id], onDelete: Cascade)
  productId     String @db.ObjectId
  quantity      Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Wishlist{
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  user          User@relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String @db.ObjectId
  product       Product@relation(fields: [productId], references: [id], onDelete: Cascade)
  productId     String @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Banner {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  description   String?
  buttonText    String?
  buttonLink    String?
  Image         Image[]
  store         Store@relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId       String @db.ObjectId
  collection    Collection? @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId String? @db.ObjectId
  discount      Discount? @relation(fields: [discountId], references: [id], onDelete: Cascade)
  discountId    String? @db.ObjectId
  sale          Sale? @relation(fields: [saleId], references: [id], onDelete: Cascade)
  saleId        String? @db.ObjectId
  category      Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId    String? @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  name              String?
  description       String?
  url               String?
  key               String?
  product           Product?         @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId         String?          @db.ObjectId
  store             Store?           @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId           String?          @db.ObjectId
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  productVariant    ProductVariant?  @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  productVariantId  String?          @db.ObjectId
  Category Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String? @db.ObjectId

  collection Collection? @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId String? @db.ObjectId
  Banner Banner? @relation(fields: [bannerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  bannerId String? @db.ObjectId

  Brand Brand? @relation(fields: [brandId], references: [id], onDelete: Cascade)
  brandId String? @db.ObjectId
}


model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([userId, credentialID])
}